const express = require("express");
const router = require("../../RestApi_Router/router/bookrouter");
const route = express.Router();
const Student = require("../model/Studentmodel")
const bcrypt = require("bcryptjs")
const auth = require("../middleware/auth")


route.get("/", (req, resp) => {
    resp.render("login");
})

route.get("/index", (req, resp) => {
    resp.render("index");
})

route.post("/addStudent", async (req, resp) => {

    try {
        const student = new Student(req.body);


        const token = await student.generateAuthToken();


        const result = await student.save();
        resp.render("index", { "success": "Data Inserted successfully !!!!" })
    } catch (error) {
        resp.render("index")
    }

})

route.get("/view", auth, async (req, resp) => {

    try {
        const data = await Student.find();
        resp.render("display", { "data": data });
    } catch (error) {
        console.log(error)
    }
})

route.post("/login", async (req, resp) => {

    try {

        const email = req.body.Email;
        const pass = req.body.Password;

        const studentData = await Student.findOne({ Email: email })


        const token = await studentData.generateAuthToken();

        resp.cookie("jwt", token, {
            expires: new Date(Date.now() + 300000),
            httpOnly: true
        });


        const isMatch = await bcrypt.compare(pass, studentData.Password);



        if (isMatch) {
            resp.redirect("view")
        }
        else {
            resp.render("login", { err: "Invalid username or password" })
        }


    } catch (error) {
        resp.render("login", { err: "Invalid username or password" })

    }

})




route.get("/delete/:did", async (req, resp) => {
    const _id = req.params.did;
    try {
        const result = await Student.findByIdAndDelete(_id);
        resp.redirect("/view")
    } catch (error) {
        console.log(error);
    }
})

route.get("/update/:did", async (req, resp) => {
    const _id = req.params.did;
    try {
        const result = await Student.findById(_id);
        console.log(result)
        resp.render("index", { "data": result });
    } catch (error) {
        console.log(error);
    }
})


route.post("/update/addStudent", async (req, resp) => {


    try {
        const result = await Student.findByIdAndUpdate(req.body.id, req.body);
        resp.redirect("/view");
    } catch (error) {
        console.log(error)
    }



})

route.get("/logout", auth, (req, resp) => {


    // req.student.Tokens = req.student.Tokens.filter((element) => {
    //     return element.token != req.token;
    // })

    req.student.Tokens = [];

    resp.clearCookie("jwt");
    req.student.save();
    resp.render("login");
})

module.exports = route;